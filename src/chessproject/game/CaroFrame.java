/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chessproject.game;

import chessproject.client.WaitRoomGUI;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author hieup
 */
public class CaroFrame extends javax.swing.JFrame implements WindowListener{

    /**
     * Creates new form CaroFrame
     */
    private static final String SECOND_MOVE = "art/tickO.png";
    private static final String FIRST_MOVE = "art/tickX.png";
    private ArrayList<CaroTile> myMove;
    private ArrayList<CaroTile> opponentMove;
    private boolean isTurn;    
    private WaitRoomGUI parent;
    private ArrayList<ArrayList<CaroTile>> tiles;
    private String myTick, opponentTick;
    private int size;
    private boolean isUndo;
    private boolean waitUndo;
    private ClockPanel myClock, opponentClock;
    
    public CaroFrame(WaitRoomGUI parent, boolean isTurn, int size, boolean undoMode, int mode) {
        initComponents();
        initCaroTile(size);
        initClock(mode);
        this.addWindowListener(this);
        this.parent = parent;
        this.isTurn = isTurn;
        if(isTurn){
            this.myTick = FIRST_MOVE;
            this.opponentTick = SECOND_MOVE;
        }
        else{
            this.myTick = SECOND_MOVE;
            this.opponentTick = FIRST_MOVE;
        } 
        this.size = size;
        isUndo = false;   
        waitUndo = false;
        myMove = new ArrayList();
        opponentMove = new ArrayList();
        if(!undoMode){
            this.remove(undoButton);
        }
        if(isTurn){
            myClock.start();
        }
        else{
            opponentClock.start();
        }
    }
    
    public CaroFrame() {
        initComponents();
        initCaroTile(40);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        caroPanel = new javax.swing.JPanel();
        undoButton = new javax.swing.JButton();
        myTimer = new javax.swing.JPanel();
        opponentTimer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        caroPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        caroPanel.setPreferredSize(new java.awt.Dimension(400, 400));
        caroPanel.setLayout(new java.awt.GridLayout(1, 0));

        undoButton.setText("Xin đi lại");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        myTimer.setPreferredSize(new java.awt.Dimension(175, 120));

        javax.swing.GroupLayout myTimerLayout = new javax.swing.GroupLayout(myTimer);
        myTimer.setLayout(myTimerLayout);
        myTimerLayout.setHorizontalGroup(
            myTimerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 175, Short.MAX_VALUE)
        );
        myTimerLayout.setVerticalGroup(
            myTimerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );

        opponentTimer.setPreferredSize(new java.awt.Dimension(175, 120));

        javax.swing.GroupLayout opponentTimerLayout = new javax.swing.GroupLayout(opponentTimer);
        opponentTimer.setLayout(opponentTimerLayout);
        opponentTimerLayout.setHorizontalGroup(
            opponentTimerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 175, Short.MAX_VALUE)
        );
        opponentTimerLayout.setVerticalGroup(
            opponentTimerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(caroPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(undoButton)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(myTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(opponentTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(myTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(opponentTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(undoButton))
                    .addComponent(caroPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        // TODO add your handling code here:
        if(isUndo){
            try {
                stopTime();
                parent.requestUndo();
                isUndo = false;
                waitUndo = true;
                
            } catch (IOException ex) {
                Logger.getLogger(CaroFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Bạn không thể đi lại");
        }
    }//GEN-LAST:event_undoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CaroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CaroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CaroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CaroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CaroFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel caroPanel;
    private javax.swing.JPanel myTimer;
    private javax.swing.JPanel opponentTimer;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables
    
    private void movePlay(CaroTile tile) throws IOException{
        if(!isTurn){
            JOptionPane.showMessageDialog(this, "Đợi đối thủ đánh");
            return;
        }
        if(waitUndo){
            return;
        }
        boolean isTick = tile.tick(myTick, true);
        this.setVisible(true);
        if(!isTick){
            try {
                myClock.stop();
                parent.moveCheck(tile.getAbscissa(), tile.getOrdinate(), myClock.getTime());
                isTurn = false;
                isUndo = true;
                this.myMove.add(tile);
                if(isWin(tile.getAbscissa(), tile.getOrdinate())){
                    parent.gameOver(true);
                }
                opponentClock.start();
            } catch (IOException ex) {
         
            }
        }
        
    }
    
    public void play(int abscissa, int ordinate, int time) throws IOException{
        this.opponentClock.stop();
        CaroTile tile = tiles.get(abscissa).get(ordinate);     
        tile.tick(opponentTick, false);
        this.opponentMove.add(tile);
        this.opponentClock.setTime(time);
        isTurn = true;
        myClock.start();
        this.setVisible(true);
    }
    
    private boolean isWin(int abscissa, int ordinate){
        return isRow(abscissa, ordinate) || isColumn(abscissa, ordinate) ||
                isCrossLeft(abscissa, ordinate) || isCrossRight(abscissa, ordinate);
    }

    public boolean isWaitUndo() {
        return waitUndo;
    }

    public void setWaitUndo(boolean waitUndo) {
        this.waitUndo = waitUndo;
    }
    
    public void undoLastMove(boolean isMy) {
        if(isMy && myMove.size()>0){ 
            if(myTick.equals(FIRST_MOVE)){
                if(myMove.size()==opponentMove.size()){
                    undoOpponent();
                }
            }
            else{
                if(myMove.size()<opponentMove.size())
                    undoOpponent();
            }
            undoMy();
            isTurn = true;
        }
        else if(!isMy && opponentMove.size()>0){
           if(opponentTick.equals(FIRST_MOVE)){
               if(myMove.size()==opponentMove.size()){
                   undoMy();
               }
           }
           else{
               if(myMove.size()>opponentMove.size())
                    undoMy();
           }
           undoOpponent(); 
           isTurn = false;
        }
        this.setVisible(true);
        JOptionPane.showMessageDialog(this, "Nước cờ đã được đi lại");

    }
    
    private void undoMy(){
        CaroTile myTile = myMove.get(myMove.size()-1);
        myMove.remove(myTile);
        myTile = tiles.get(myTile.getAbscissa()).get(myTile.getOrdinate());
        myTile.unTick();
    }
    
    private void undoOpponent(){
        CaroTile opponentTile = opponentMove.get(opponentMove.size()-1);
        opponentMove.remove(opponentTile);
        opponentTile = tiles.get(opponentTile.getAbscissa()).get(opponentTile.getOrdinate());
        opponentTile.unTick();
    }
    
    private void initCaroTile(int size) {
        tiles = new ArrayList();
        caroPanel.setPreferredSize(new Dimension(size*25, size*25));
        caroPanel.setLayout(new GridLayout(size,size));
        for(int i = 0; i < size; i++){
            ArrayList<CaroTile> row =  new ArrayList();
            for(int j = 0; j<size; j++){
                final CaroTile tile = new CaroTile(i, j);
                row.add(tile);
                tile.addMouseListener(new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        try {
                            movePlay(tile);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {
                        
                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
                        
                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {
                        
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        
                    }
                });
                caroPanel.add(tile);
            }
            tiles.add(row);
            
        }
    }

    @Override
    public void windowOpened(WindowEvent e) {
       
    }

    @Override
    public void windowClosing(WindowEvent e) {
        parent.windowClosing(e);
    }

    @Override
    public void windowClosed(WindowEvent e) {
        
    }

    @Override
    public void windowIconified(WindowEvent e) {
        
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        
    }

    @Override
    public void windowActivated(WindowEvent e) {
        
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        
    }

    private boolean isColumn(int abscissa, int ordinate) {
        int count = 0;
        //left stack
        int tmp = abscissa;
        while (tmp>0){
            tmp--;
            if(!tiles.get(tmp).get(ordinate).isMy()){
                break;
            }
            count++;
        }
        //right stack
        tmp = abscissa;
        
        while(tmp<size-1){
            tmp+=1;
            if(!tiles.get(tmp).get(ordinate).isMy()){
                break;
            }
            count++;
        }
        return count >= 4;
    }

    private boolean isRow(int abscissa, int ordinate) {
        int count = 0;
        //left stack
        int tmp = ordinate;
        while (tmp>0){
            tmp--;
            if(!tiles.get(abscissa).get(tmp).isMy()){
                
                break;
            }
            count++;
        }
        //right stack
        tmp = ordinate;
        while(tmp<size-1){
            tmp++;
            if(!tiles.get(abscissa).get(tmp).isMy()){
                break;
            }
            count++;
        }
        return count >= 4;
    }

    private boolean isCrossLeft(int abscissa, int ordinate) {
        int count = 0;
        int x = abscissa;
        int y = ordinate;
        while(x>0&&y<size-1){
            x--;
            y++;
            if(!tiles.get(x).get(y).isMy()){
                break;
            }
            count++;
        }
        x = abscissa;
        y = ordinate;
        while(y>0&&x<size-1){
            x++;
            y--;
            if(!tiles.get(x).get(y).isMy()){
                break;
            }
            count++;
        }
        return count >= 4;
    }

    private boolean isCrossRight(int abscissa, int ordinate) {
        int count = 0;
        int x = abscissa;
        int y = ordinate;
        while(x>0&&y>0){
            x--;
            y--;
            if(!tiles.get(x).get(y).isMy()){
                break;
            }
            count++;
        }
        x = abscissa;
        y = ordinate;
        while(y<size-1&&x<size-1){
            x++;
            y++;
            if(!tiles.get(x).get(y).isMy()){
                break;
            }
            count++;
        }
        return count >= 4;
    }

    private int gameMode(int mode){
        if(mode==1) return 1200;
        if(mode==2) return 10;
        return 600;
    }

    private void initClock(int mode) {
        myClock = new ClockPanel(gameMode(mode), "Tôi", this, true);
        opponentClock = new ClockPanel(gameMode(mode), "Đối thủ", this, false);
        myClock.setBounds(0, 0, 175, 120);
        opponentClock.setBounds(0, 0, 175, 120);
        myTimer.add(myClock);
        opponentTimer.add(opponentClock);
    }

    public void stopTime() {
        myClock.stop();
        opponentClock.stop();
    }

    void outTime() throws IOException{
        parent.outTime();
        this.stopTime();
        
    }

    public void startTime() {
        if(isTurn){
            myClock.start();
        }
        else{
            opponentClock.start();
        }
    }
  
}
